{"version":3,"sources":["components/Editor.jsx","convertText.js","components/Previewer.jsx","App.js","defaultInput.js","reportWebVitals.js","index.js"],"names":["Editor","props","useState","editorSize","setEditorSize","className","editorBtn","setEditorBtn","onClick","onChange","value","input","convertText","marked","replaceAll","Previewer","previewSize","setPreviewSize","previewBtn","setPreviewBtn","markdownText","id","parse","App","setInput","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAgCeA,MA9Bf,SAAgBC,GACd,MAAoCC,mBAAS,SAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAkCF,mBAAS,mBAAGG,UAAU,uBAAxD,mBAAOC,EAAP,KAAkBC,EAAlB,KAaA,OACE,sBAAKF,UAAW,iBAAkBF,EAAlC,UACE,sBAAKE,UAAU,UAAf,UACE,uCACA,wBAAQG,QAfd,WACoB,UAAfL,IACDC,EAAc,SACdG,EAAa,mBAAGF,UAAU,0BAEV,UAAfF,IACDC,EAAc,SACdG,EAAa,mBAAGF,UAAU,yBAQxB,SAAgCC,OAElC,0BACED,UAAU,aACVI,SAAUR,EAAMQ,SAChBC,MAAOT,EAAMU,Y,gBC8BNC,EA/CK,SAACD,GAEnB,OAAOE,IAAOF,GAAOG,WAAW,KAAM,S,QCuBzBC,MA9Bf,SAAmBd,GACjB,MAAsCC,mBAAS,SAA/C,mBAAOc,EAAP,KAAoBC,EAApB,KACA,EAAoCf,mBAAS,mBAAGG,UAAU,uBAA1D,mBAAOa,EAAP,KAAmBC,EAAnB,KAaMC,EAAeR,EAAYX,EAAMS,OAEvC,OACE,sBAAKL,UAAW,uBAAuBW,EAAvC,UACE,sBAAKX,UAAU,UAAf,UACE,0CACA,wBAAQG,QAjBd,WACqB,UAAhBQ,IACDC,EAAe,SACfE,EAAc,mBAAGd,UAAU,0BAEV,UAAhBW,IACDC,EAAe,SACfE,EAAc,mBAAGd,UAAU,yBAUzB,SAAiCa,OAEnC,qBAAKG,GAAG,UAAUhB,UAAU,cAA5B,SACGiB,YAAMF,SCFAG,MApBf,WACE,MAA0BrB,mBCPV,8wBDOhB,mBAAOS,EAAP,KAAca,EAAd,KAMA,OACE,sBAAKnB,UAAU,MAAf,UACE,cAAC,EAAD,CACEM,MAAOA,EACPF,SARN,SAAqBgB,GACnBD,EAASC,EAAEC,OAAOhB,UAShB,cAAC,EAAD,CACEA,MAAOC,QERAgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.31b56151.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nfunction Editor(props) {\r\n  const [editorSize, setEditorSize] = useState('small')\r\n  const [editorBtn, setEditorBtn] = useState(<i className=\"fas fa-expand-alt\"></i>)\r\n\r\n  function resizeEditor() {\r\n    if(editorSize === 'small') {\r\n      setEditorSize('large')\r\n      setEditorBtn(<i className=\"fas fa-compress-alt\"></i>)\r\n    }\r\n    if(editorSize === 'large') {\r\n      setEditorSize('small')\r\n      setEditorBtn(<i className=\"fas fa-expand-alt\"></i>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={'editor editor-'+ editorSize}>\r\n      <div className='toolbar'>\r\n        <p>Editor</p>\r\n        <button onClick={resizeEditor}>{editorBtn}</button>\r\n      </div>\r\n      <textarea\r\n        className='editorText'\r\n        onChange={props.onChange}\r\n        value={props.input}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editor;\r\n","// Returns a string containing HTML tags. String is then parsed to React HTML in the Previewer component.\r\n\r\n/*\r\nThis program uses markedJS to reformat text as markdown.\r\nI've made my own function below that uses regex to do the same thing. It gets most (but not all) syntax.\r\n*/\r\n\r\nimport marked from 'marked'\r\n\r\nconst convertText = (input) => {\r\n\r\n  return marked(input).replaceAll('\\n', '<br>')\r\n\r\n  // My personal regex to markdown function - still in progress!\r\n\r\n  // return input\r\n  //   // h1 through h6 #\r\n  //   .replace(/^###### (.*$)/gim, '<h6>$1</h6>')\r\n  //   .replace(/^##### (.*$)/gim, '<h5>$1</h5>')\r\n  //   .replace(/^#### (.*$)/gim, '<h4>$1</h4>')\r\n  //   .replace(/^### (.*$)/gim, '<h3>$1</h3>')\r\n  //   .replace(/^## (.*$)/gim, '<h2>$1</h2>')\r\n  //   .replace(/^# (.*$)/gim, '<h1>$1</h1>')\r\n  //   // blockquote >\r\n  //   .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')\r\n  //   // multi line code ```\r\n  //   .replace(/```([^\\r]*?)```/gim, '<code>$1</code>')\r\n  //   // single line code `\r\n  //   .replace(/`(.*?)`/gim, '<code>$1</code>')\r\n  //   // bold and italic ***, ___\r\n  //   .replace(/\\*\\*\\*(.*)\\*\\*\\*/gim, '<b><i>$1</i></b>')\r\n  //   .replace(/___(.*)___/gim, '<b><i>$1</i></b>')\r\n  //   //bold **, __\r\n  //   .replace(/\\*\\*(.*)\\*\\*/gim, '<b>$1</b>')\r\n  //   .replace(/__(.*)__/gim, '<b>$1</b>')\r\n  //   // italic *, _\r\n  //   .replace(/\\*(.*)\\*/gim, '<i>$1</i>')\r\n  //   .replace(/_(.*)_/gim, '<i>$1</i>')\r\n  //   // strikethrough ~~\r\n  //   .replace(/~~(.*)~~/gim, '<s>$1</s>')\r\n  //   // img [caption](link)\r\n\t// \t.replace(/!\\[(.*?)\\]\\((.*?)\\)/gim, \"<img alt='$1' src='$2' />\")\r\n  //   // hyperlink [text](link)\r\n\t// \t.replace(/\\[(.*?)\\]\\((.*?)\\)/gim, \"<a href='$2'>$1</a>\")\r\n  //   // list items * + -\r\n  //   .replace(/^[-*+]+ (.*$)/gim, '<li>$1</li>')\r\n  //   // list items, number\r\n  //   .replace(/^\\d+. (.*$)/gim, '<li>$1</li>')\r\n  //   // horizontal rules\r\n  //   .replace(/---/, '<hr />')\r\n  //   // line breaks\r\n  //   .replaceAll('\\n', '<br />')\r\n  //   .trim()\r\n\r\n}\r\n\r\nexport default convertText\r\n","import React, {useState} from 'react'\r\nimport convertText from '../convertText'\r\nimport parse from 'html-react-parser'\r\n\r\nfunction Previewer(props) {\r\n  const [previewSize, setPreviewSize] = useState('small')\r\n  const [previewBtn, setPreviewBtn] = useState(<i className=\"fas fa-expand-alt\"></i>)\r\n\r\n  function resizePreview() {\r\n    if(previewSize === 'small') {\r\n      setPreviewSize('large')\r\n      setPreviewBtn(<i className=\"fas fa-compress-alt\"></i>)\r\n    }\r\n    if(previewSize === 'large') {\r\n      setPreviewSize('small')\r\n      setPreviewBtn(<i className=\"fas fa-expand-alt\"></i>)\r\n    }\r\n  }\r\n\r\n  const markdownText = convertText(props.value)\r\n\r\n  return (\r\n    <div className={'previewer previewer-'+previewSize}>\r\n      <div className='toolbar'>\r\n        <p>Previewer</p>\r\n        <button onClick={resizePreview}>{previewBtn}</button>\r\n      </div>\r\n      <div id='preview' className='previewText'>\r\n        {parse(markdownText)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Previewer;\r\n","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport Editor from './components/Editor'\r\nimport Previewer from './components/Previewer'\r\nimport defaultInput from './defaultInput'\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(defaultInput);\r\n\r\n  function changeInput(e) {\r\n    setInput(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Editor\r\n        input={input}\r\n        onChange={changeInput}\r\n      />\r\n      <Previewer\r\n        value={input}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const defaultInput =\r\n`\r\n# This is my markdown previewer, built in React.\r\n---\r\n## Type some markdown text in the editor, and watch it get stylized in the previewer in real time.\r\n\r\n### For a reminder on what you can do in markdown, check out [this cheatsheet](https://www.markdownguide.org/cheat-sheet/)\r\n\r\n\\`function sayHi() {console.log('Hi')}\\`\r\n\r\n\\`\\`\\`\r\n//Here's some longer code\r\nfunction sayHello = () => {\r\n   const hello = 'Hello';\r\n   console.log(hello);\r\n}\r\n\\`\\`\\`\r\n\r\n+ One\r\n- two\r\n* three\r\n1. four\r\n\r\n> The only way to deal with an unfree world is to become so absolutely free that your very existence is an act of rebellion.\r\n>\r\n> Albert Camus\r\n\r\n[Built by **Nick Hou**](http://www.nicholashou.com)\r\n\r\n![real picture of author](https://i.kym-cdn.com/photos/images/newsfeed/001/505/718/136.jpg)\r\n`\r\n\r\nexport default defaultInput\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}